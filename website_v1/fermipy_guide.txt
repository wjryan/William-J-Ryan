----------
A Guide to FERMIPY
----------
Author: William Ryan
Started: 12 March 2020
Finished: TBD
----------
What is FERMI?
	Fermi is a satellite gamma ray telescope. It lives in space gathering photons and pooping out data.
----------
WHAT IS FERMIPY?
	Fermipy is a set of coding tools in python tailored to analyze data from the Fermi Large Area Telescope (FermiLAT), one of two instruments aboard the Fermi satellite. The code takes in photon data and spits out something meaningful, usually. This Guide will go over the two analysis methods I am most familiar with, SED and Lightcurve.
----------
GENERAL OVERVIEW OF ANALYSES

SED Analysis:

	Given a photon has a continuous distribution of energies it could possess we can sort a source's photon data set into groups (bins) of similar energies. Each bin can be translated into a total energy, graphed, and fit with a model. This model's fancy name is a Spectral Energy Distribution or SED for short. With an SED we know how much energy is emitted from a source at a specific energy. SEDs are useful for creating a lightcurve and understanding the basic properties of the source in question.

Lightcurve Analysis:
	Knowing how many photons a source emits is not as useful as knowing at which energies and with what intensity a source emits at. We can place a source's photon data into time bins (day/week/month/etc bins) and use the SED to transform a bin's total photons into a total energy value. Performing this operation over a data set produces a flux versus time graph called a lightcurve. A variety of analses can be performed on a lightcurve to probe patterns within a sources emissions.

----------
THE CODE
----------
SED:
----------
#!/usr/bin/env python2.7

import os
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
from fermipy.gtanalysis import GTAnalysis
from fermipy.plotting import ROIPlotter, SEDPlotter
from astropy.table import Table, Column
import astropy.io.fits as pyfits
import yaml 

plt.switch_backend('agg')

config = yaml.load(open('config.yaml'))
SOURCE = config['selection']['target']
DIR = config['fileio']['outdir']
LCDIR = config['lightcurve']['outdir']

gta = GTAnalysis('config.yaml', logging={'verbosity':3})
matplotlib.interactive(True)
gta.setup()

gta.print_model()
print(gta.roi[SOURCE])

gta.free_sources(minmax_ts = [9,1600000])

fit_results = gta.fit()
gta.print_model()
print(gta.roi[SOURCE])
gta.write_roi('fit_LP', make_plots=True,save_model_map=True)
tsmap = gta.tsmap(prefix='TSmap_fit_LP', make_plots=True)
resid = gta.residmap('Residuals_fit_LP',make_plots=True)

gta.print_model()
gta.print_params(allpars=True)
gta.print_roi()

gta.residmap(prefix = 'weighted_residuals', make_plots = True, use_weights = True)

sed = gta.sed(SOURCE,prefix='SED_fit_LP', bin_index = 1.72304034233, free_background = True, cov_scale = None,free_pars=['norm','alpha','beta'])

gta.write_roi('SED_fit_LP', make_plots=True,save_model_map=True)
----------
lightcurve:
----------
#!/usr/bin/env python2.7

import os
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
from fermipy.gtanalysis import GTAnalysis
from fermipy.plotting import ROIPlotter, SEDPlotter
from astropy.table import Table, Column
import astropy.io.fits as pyfits
import yaml 

plt.switch_backend('agg')

config = yaml.load(open('config1.yaml'))
SOURCE = config['selection']['target']
DIR = config['fileio']['outdir']
LCDIR = config['lightcurve']['outdir']

gta = GTAnalysis('config1.yaml', logging={'verbosity':3})
matplotlib.interactive(True)
gta.setup()

gta.print_model()
print(gta.roi[SOURCE])


gta.set_parameter('4FGL J1104.4+3812','norm',value = 1.721997147e-11, scale = 1, error = 0.01313677393e-11, update_source = False)
gta.set_parameter_bounds('4FGL J1104.4+3812','norm',[1e-16,1000e-11]) 

gta.set_parameter('4FGL J1104.4+3812','alpha', value = 1.739376675, scale = 1, error =  0.006991402649, update_source = False)
gta.set_parameter('4FGL J1104.4+3812','Eb', value = 1287.365845, scale = 1, update_source = False)
gta.set_parameter('4FGL J1104.4+3812','beta', value = 0.01523674109, scale = 1, error = 0.002518878993, update_source = False)


lc = gta.lightcurve(SOURCE,free_background=False,make_plots=True,shape_ts_threshold = 1000000000)
gta.write_roi(LCDIR+'LightCurve',make_plots=True,save_model_map=True)

fig = plt.figure(figsize=(8,6))
plt.errorbar((lc['tmin_mjd']+lc['tmax_mjd'])/2., lc['flux'],
             yerr=lc['flux_err'], xerr = (lc['tmin_mjd']-lc['tmax_mjd'])/2., fmt='ko')
plt.ylabel('Phi_{\gamma}$ [ph/cm$^2$/s]', fontsize=18)
plt.xlabel('MJD', fontsize=18)
plt.xticks(fontsize=18)
plt.yticks(fontsize=18)
plt.grid(True)
plt.legend(loc=1,prop={'size' :16},numpoints=1,scatterpoints=1,ncol=1)
fig.tight_layout(pad=0.5)
plt.savefig(DIR+'/'+LCDIR+'_LightCurve'+'_Photon'+'.png')

fig2 = plt.figure(figsize=(8,6))
plt.errorbar((lc['tmin_mjd']+lc['tmax_mjd'])/2., lc['eflux'], yerr=lc['eflux_err'], xerr = (lc['tmin_mjd']-lc['tmax_mjd'])/2., fmt='ko')
plt.ylabel('Phi_{\gamma}$ [ph/cm$^2$/s]', fontsize=18)
plt.xlabel('$t$ [s]', fontsize=18)
plt.xticks(fontsize=18)
plt.yticks(fontsize=18)
plt.grid(True)
plt.legend(loc=1,prop={'size' :16},numpoints=1,scatterpoints=1,ncol=1)
fig.tight_layout(pad=0.5)
plt.savefig(DIR+'/'+LCDIR+'_LightCurve'+'_Energy'+'.png')

print('And another one for Oliver...')
fig3 = plt.figure(figsize=(8,6))
bins = np.linspace(0,500,11)
plt.hist(lc['ts'], bins, color='r', ec='k')
plt.xlabel('TS', fontsize=18)
fig.tight_layout(pad=0.5)
plt.savefig(DIR+'/'+LCDIR+'_LightCurve'+'_TS_Hist'+'.png')

lctab = Table([lc['tmin_mjd'],lc['tmax_mjd'],lc['ts'],lc['flux'],lc['flux_err'],lc['eflux'],lc['eflux_err']])
lctab.write(DIR+'/'+LCDIR+'LightCurve.txt',format='ascii.fixed_width')